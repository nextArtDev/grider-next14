generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String  @id @default(cuid())
  phone      String  @unique
  name       String
  password   String
  image      Image?  @relation(fields: [imageId], references: [id])
  role       Role    @default(USER)
  isVerified Boolean @default(false)

  verificationCode Int?
  verificationDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   String?
}

enum Role {
  USER
  ADMIN
}

enum BookSize {
  Roghei
  Kheshti
  Rahli
  Vaziri
  Soltani
  Gibi
  Paltoei
  Hamayeli
  Janamazi
  Beyazee
}

enum BookCover {
  Shomiz
  Kaghazi
  Galingor
  Sakht
  Narm
  Ghalaf
  Zarrin
  Makhmal
  Cherm
  Parcheh
}

model Image {
  id         String   @id @default(cuid())
  url        String   @db.Text
  key        String   @unique @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User        User[]
  Product     Product?      @relation(fields: [productId], references: [id])
  productId   String?
  Billboard   Billboard[]
  Category    Category[]
  // Writer       Writer[]
  // Translator   Translator[]
  // Editor       Editor[]
  // Illustrator  Illustrator[]
  // Photographer Photographer[]
  Contributor Contributor[]

  @@index([productId])
}

model Store {
  id         String      @id @default(uuid())
  name       String      @unique
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  image      Image?     @relation(fields: [imageId], references: [id])
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  imageId    String?

  @@index([storeId])
  @@index([imageId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  image       Image?    @relation(fields: [imageId], references: [id])
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageId     String?

  @@index([storeId])
  @@index([billboardId])
  @@index([imageId])
}

model Product {
  id                String     @id @default(uuid())
  name              String
  originalName      String?
  description       String?    @db.Text
  price             Decimal
  isFeatured        Boolean    @default(false)
  isArchived        Boolean    @default(false)
  size              BookSize?
  shabak            Decimal?
  publishDate       DateTime?
  recentPublishDate DateTime?
  pages             Int?
  weight            Int?
  cover             BookCover?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  storeId    String // Foreign Key to Store
  categoryId String // Foreign Key to Category
  images     Image[] // Relation to Image model

  orderItems OrderItem[] // Relation to Order model

  writer       Contributor[] @relation("writer")
  translator   Contributor[] @relation("translator")
  editor       Contributor[] @relation("editor")
  illustrator  Contributor[] @relation("illustrator")
  photographer Contributor[] @relation("photographer")

  @@index([storeId])
  @@index([categoryId])
}

enum ContributorRole {
  Writer
  Translator
  Editor
  Illustrator
  Photographer
}

model Contributor {
  id      String          @id @default(uuid())
  name    String
  bio     String?
  role    ContributorRole
  image   Image?          @relation(fields: [imageId], references: [id])
  imageId String?

  writer       Product[] @relation("writer")
  Translator   Product[] @relation("translator")
  editor       Product[] @relation("editor")
  illustrator  Product[] @relation("illustrator")
  photographer Product[] @relation("photographer")
}

// model Writer {
//   id      String    @id @default(uuid())
//   name    String
//   bio     String?
//   image   Image?    @relation(fields: [imageId], references: [id])
//   product Product[]
//   imageId String?
// }

// model Translator {
//   id    String  @id @default(uuid())
//   name  String
//   bio   String?
//   image Image?  @relation(fields: [imageId], references: [id])

//   product Product[]
//   imageId String?
// }

// model Editor {
//   id    String  @id @default(uuid())
//   name  String
//   bio   String?
//   image Image?  @relation(fields: [imageId], references: [id])

//   product Product[]
//   imageId String?
// }

// model Illustrator {
//   id    String  @id @default(uuid())
//   name  String
//   bio   String?
//   image Image?  @relation(fields: [imageId], references: [id])

//   product Product[]
//   imageId String?
// }

// model Photographer {
//   id    String  @id @default(uuid())
//   name  String
//   bio   String?
//   image Image?  @relation(fields: [imageId], references: [id])

//   product Product[]
//   imageId String?
// }

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
