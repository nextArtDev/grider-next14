generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String  @id @default(cuid())
  phone      String  @unique
  name       String
  password   String
  image      Image?  @relation(fields: [imageId], references: [id])
  role       Role    @default(USER)
  isVerified Boolean @default(false)

  verificationCode Int?
  verificationDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   String?
}

enum Role {
  USER
  ADMIN
}

model Image {
  id         String   @id @default(cuid())
  url        String   @db.Text
  key        String   @unique @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User      User[]
  Product   Product?    @relation(fields: [productId], references: [id])
  productId String?
  Billboard Billboard[]
  Category  Category[]

  @@index([productId])
}

model Store {
  id         String      @id @default(uuid())
  name       String      @unique
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  image      Image?     @relation(fields: [imageId], references: [id])
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  imageId    String?

  @@index([storeId])
  @@index([imageId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  image       Image?    @relation(fields: [imageId], references: [id])
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageId     String?

  @@index([storeId])
  @@index([billboardId])
  @@index([imageId])
}

model Product {
  id           String   @id @default(uuid())
  storeId      String // Foreign Key to Store
  store        Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId   String // Foreign Key to Category
  category     Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name         String
  originalName String?
  description  String?  @db.Text
  price        Decimal
  isFeatured   Boolean  @default(false)
  isArchived   Boolean  @default(false)
  sizeId       String // Foreign Key to Size
  size         Size     @relation(fields: [sizeId], references: [id])

  images     Image[] // Relation to Image model
  orderItems OrderItem[] // Relation to Order model
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  shabak            Decimal?
  publishDate       DateTime?
  recentPublishDate DateTime?
  pages             Int?
  weight            Int?

  coverType    Cover      @relation(fields: [coverId], references: [id])
  writer       Writer     @relation(fields: [writerId], references: [id])
  translator   Translator @relation(fields: [translatorId], references: [id])
  coverId      String
  writerId     String
  translatorId String

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([coverId])
  @@index([writerId])
  @@index([translatorId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model Writer {
  id       String    @id @default(uuid())
  name     String
  bio      String?
  birthDay DateTime?
  death    DateTime?
  Product  Product[]
}

model Translator {
  id       String    @id @default(uuid())
  name     String
  bio      String?
  birthDay DateTime?
  death    DateTime?
  Product  Product[]
}

model Editor {
  id       String    @id @default(uuid())
  name     String
  bio      String?
  birthDay DateTime?
  death    DateTime?
}

model Cover {
  id          String    @id @default(uuid())
  name        String
  discription String?
  Product     Product[]
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}
